name: release to ppa
on:
  workflow_dispatch:
  push:
    # tags:
    #   - 'v*.*.*'

jobs:
  ppa:
    name: ppa 
    runs-on: ubuntu-22.04
    # if: startsWith(github.ref, 'refs/tags/')

    steps:
      - uses: actions/checkout@v2
      - run: git fetch --prune --unshallow --tags --force

      #- name: Check if release is needed because tag matches latest annotated
      #  env:
      #    GITHUB_REF: ${{github.ref}}
      #  run: |
      #    GETVERSION="$(./scripts/get-version)"
      #    GITTAG="${GITHUB_REF#refs/tags/v*}"
      #    if [ "$GETVERSION" == "$GITTAG" ]
      #    then
      #      echo "do_release=true" >> $GITHUB_ENV
      #    else
      #      echo "Skipping because $GETVERSION did not match $GITTAG"
      #    fi

      - name: Make dist tarball
        # if: env.do_release
        env:
          OS_TYPE: rockylinux
          OS_VERSION: 8
          HIDE_DIST: true
          GO_ARCH: linux-amd64
        run: |
          # Make a new copy of the source files for this build
          set -x
          mkdir rpmdir
          shopt -s extglob
          mv .??* !(rpmdir) rpmdir
          cd rpmdir
          ./scripts/ci-docker-run
          cp *.tar.gz ..
          cd ..

          tar xf apptainer-*.tar.gz
          NAME=`basename apptainer-*.tar.gz .tar.gz`
          echo "NAME=$NAME"  >> $GITHUB_ENV

      - name: Publish PPA
        uses: yuezk/publish-ppa-package@v2
        with:
            repository: "jasonyangshadow/test"
            gpg_private_key: ${{ secrets.PPA_GPG_PRIVATE_KEY }}
            gpg_passphrase: ${{ secrets.PPA_GPG_PASSPHRASE }}
            tarball: ${{ env.NAME }}.tar.gz
            debian_dir: ${{ env.NAME }}/dist/debian
            deb_email: "test@tset.com"
            deb_fullname: "test"
      
      # - name: Generate PPA required files
      #  # if: env.do_release
      #   env:
      #     OS_TYPE: debian
      #     OS_VERSION: 11
      #     GO_ARCH: linux-amd64
      #     TEST_TYPE: ppa
      #   run: |
      #     # Make a new copy of the source files for this build
      #     set -x
      #     tar xf apptainer-*.tar.gz
      #     FOLDER=`basename apptainer-*.tar.gz .tar.gz`
      #     cd "$FOLDER"
      #     VERSION="$(./scripts/get-version)"
      #     export MAJOR_VERSION=${VERSION%+*}
      #     cp ../apptainer-*.tar.gz apptainer_${MAJOR_VERSION}.orig.tar.gz
      #     ./scripts/ci-docker-run
      #     cp *.deb ..
      #     cd ..